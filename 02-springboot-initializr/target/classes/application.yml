#字符串默认不加单引号或者双引号，“”不会转义特殊字符，特殊字符会以原本表示呈现，‘’会转义特殊字符，特殊字符以字符串形式呈现
name: "zhangsan \n lisi"
name2: '张三\n李四'
#对象,map(属性和值) （键值对）
friends:
  lastName: 张三
  age: 18
#行内写法
friends1: {lastName: zhangsan,age: 20}
#数组（list,set）,用 - 值表示数组中的一个元素
pets:
  - cat
  - dog
  - pig
#行内写法
pets2: [cat,dog,pig]

spring:  #默认.properties的优先级要高于yaml文件的优先级,命令行参数优先级的方式又高于.properties文件的方式（java -jar spring-boot-initializr.jar --spring.profiles.active=prod）
  profiles:
    active: dev
---
server:
  port: 8085
#2.4版本升级之后，我们需要将spring.profiles配置用spring.config.activate.on-profile替代
spring:
  config:
    activate:
      on-profile: prod
---
server:
  port: 8086
spring:
  config:
    activate:
      on-profile: dev



  #person:
#  name: zhangsan
#  age: 18
#  boss: false
#  birth: 2017/12/12
#  maps: {k1: v1,k2: 12}
#  lists:
#    - lisi
#    - zhangsan
#    - wangwu
#  dog:
#    name: xiaohei
#    age: 2

#profile是spring对不同环境提供不同配置功能的支持，可以通过激活，指定参数等方式快速切换环境
  #1：多profile文件形式
    #格式：application-{profile}.properties:
        #application-dev.properties
        #application-prod.properties
  #2:多profile文档块模式
      #spring:
        #profiles:
          #active: prod #profiles.active:激活指定配置prod环境
      #---
      #spring:
        #profiles: dev
      #---  (三个短线分割多个profile块)
      #spring:
        #profiles: prod
  #3:多激活方式
      # 命令行 --spring.profiles.active=dev
      # 配置文件 spring.profiles.active=dev
      # jvm 参数 -Dspring.profiles.active=dev



